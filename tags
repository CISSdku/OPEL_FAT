!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BB_ETC	fat.h	49;"	d
BB_IMAGE	fat.h	47;"	d
BB_MANUAL	fat.h	46;"	d
BB_NORMAL	fat.h	43;"	d
BB_NORMAL_EVENT	fat.h	44;"	d
BB_PARKING	fat.h	45;"	d
BLOCK_IN_PAGE	fat.h	69;"	d
BX_END	fat.h	79;"	d
BX_ETC	fat.h	96;"	d
BX_IMAGE	fat.h	95;"	d
BX_MANUAL	fat.h	94;"	d
BX_NORMAL	fat.h	91;"	d
BX_NORMAL_EVENT	fat.h	92;"	d
BX_PARKING_EVENT	fat.h	93;"	d
BX_REUPDATE_META_DIFFER	fat.h	87;"	d
BX_START	fat.h	78;"	d
CLUSTER_IN_BLOCK	fat.h	68;"	d
CLUSTER_IN_PAGE	fat.h	67;"	d
CONFIG_FAT_DEFAULT_IOCHARSET	inode.c	38;"	d	file:
COUNT_AREA_0	inode.c	44;"	d	file:
COUNT_AREA_1	inode.c	45;"	d	file:
COUNT_AREA_2	inode.c	46;"	d	file:
COUNT_AREA_3	inode.c	47;"	d	file:
COUNT_AREA_4	inode.c	48;"	d	file:
COUNT_AREA_5	inode.c	49;"	d	file:
CURRENT_TIME_SEC_OPEL	fat.h	636;"	d
DAYS_DELTA	misc.c	184;"	d	file:
DIR_1	fat.h	35;"	d
DIR_2	fat.h	36;"	d
DIR_3	fat.h	37;"	d
DIR_4	fat.h	38;"	d
DIR_5	fat.h	39;"	d
ETC_AREA_RATIO	fat.h	106;"	d
ETC_DIRECTORY	fat.h	59;"	d
FAT_ALLOC_CLUSTER	fat.h	76;"	d
FAT_CACHE_VALID	fat.h	264;"	d
FAT_ERRORS_CONT	fat.h	123;"	d
FAT_ERRORS_PANIC	fat.h	124;"	d
FAT_ERRORS_RO	fat.h	125;"	d
FAT_FID_SIZE_WITHOUT_PARENT	nfs.c	26;"	d	file:
FAT_FID_SIZE_WITH_PARENT	nfs.c	27;"	d	file:
FAT_FREE_CLUSTER	fat.h	77;"	d
FAT_HASH_BITS	fat.h	159;"	d
FAT_HASH_SIZE	fat.h	160;"	d
FAT_IOCTL_FILLDIR_FUNC	dir.c	719;"	d	file:
FAT_MAX_CACHE	cache.c	17;"	d	file:
FAT_MAX_SHORT_SIZE	dir.c	30;"	d	file:
FAT_MAX_UNI_CHARS	dir.c	35;"	d	file:
FAT_MAX_UNI_SIZE	dir.c	36;"	d	file:
FAT_NFS_NOSTALE_RO	fat.h	128;"	d
FAT_NFS_STALE_RW	fat.h	127;"	d
FAT_READA_SIZE	fatent.c	1168;"	d	file:
FAT_VALID_MODE	file.c	460;"	d	file:
FREE	fat.h	13;"	d
GARBAGE	fat.h	15;"	d
HANDWORK_DIRECTORY	fat.h	57;"	d
IMAGE_AREA_RATIO	fat.h	105;"	d
INIT_SHORTNAME_INFO	namei_vfat.c	279;"	d	file:
IS_LEAP_YEAR	misc.c	187;"	d	file:
MANUAL_AREA_RATIO	fat.h	104;"	d
MANUAL_DIRECTORY	fat.h	56;"	d
MIDEOF	fat.h	16;"	d
MSDOS_I	fat.h	/^static inline struct msdos_inode_info *MSDOS_I(struct inode *inode)$/;"	f
MSDOS_SB	fat.h	/^static inline struct msdos_sb_info *MSDOS_SB(struct super_block *sb)$/;"	f
NORMAL_AREA_RATIO	fat.h	101;"	d
NORMAL_DIRECTORY	fat.h	53;"	d
NORMAL_EVENT_AREA_RATIO	fat.h	102;"	d
NORMAL_EVENT_DIRECTORY	fat.h	54;"	d
NUM_1	fat.h	26;"	d
NUM_2	fat.h	27;"	d
NUM_3	fat.h	28;"	d
NUM_4	fat.h	29;"	d
NUM_5	fat.h	30;"	d
NUM_6	fat.h	32;"	d
NUM_EVNET	fat.h	89;"	d
NUM_EVNET_DIRECTORY	fat.h	98;"	d
OFF	fat.h	22;"	d
ON	fat.h	23;"	d
Opt_allow_utime	inode.c	/^	Opt_umask, Opt_dmask, Opt_fmask, Opt_allow_utime, Opt_codepage,$/;"	e	enum:__anon2	file:
Opt_charset	inode.c	/^	Opt_charset, Opt_shortname_lower, Opt_shortname_win95,$/;"	e	enum:__anon2	file:
Opt_check_n	inode.c	/^	Opt_check_n, Opt_check_r, Opt_check_s, Opt_uid, Opt_gid,$/;"	e	enum:__anon2	file:
Opt_check_r	inode.c	/^	Opt_check_n, Opt_check_r, Opt_check_s, Opt_uid, Opt_gid,$/;"	e	enum:__anon2	file:
Opt_check_s	inode.c	/^	Opt_check_n, Opt_check_r, Opt_check_s, Opt_uid, Opt_gid,$/;"	e	enum:__anon2	file:
Opt_codepage	inode.c	/^	Opt_umask, Opt_dmask, Opt_fmask, Opt_allow_utime, Opt_codepage,$/;"	e	enum:__anon2	file:
Opt_debug	inode.c	/^	Opt_usefree, Opt_nocase, Opt_quiet, Opt_showexec, Opt_debug,$/;"	e	enum:__anon2	file:
Opt_discard	inode.c	/^	Opt_err_panic, Opt_err_ro, Opt_discard, Opt_nfs, Opt_time_offset,$/;"	e	enum:__anon2	file:
Opt_dmask	inode.c	/^	Opt_umask, Opt_dmask, Opt_fmask, Opt_allow_utime, Opt_codepage,$/;"	e	enum:__anon2	file:
Opt_dots	inode.c	/^	Opt_immutable, Opt_dots, Opt_nodots,$/;"	e	enum:__anon2	file:
Opt_err	inode.c	/^	Opt_nfs_stale_rw, Opt_nfs_nostale_ro, Opt_err,$/;"	e	enum:__anon2	file:
Opt_err_cont	inode.c	/^	Opt_obsolete, Opt_flush, Opt_tz_utc, Opt_rodir, Opt_err_cont,$/;"	e	enum:__anon2	file:
Opt_err_panic	inode.c	/^	Opt_err_panic, Opt_err_ro, Opt_discard, Opt_nfs, Opt_time_offset,$/;"	e	enum:__anon2	file:
Opt_err_ro	inode.c	/^	Opt_err_panic, Opt_err_ro, Opt_discard, Opt_nfs, Opt_time_offset,$/;"	e	enum:__anon2	file:
Opt_flush	inode.c	/^	Opt_obsolete, Opt_flush, Opt_tz_utc, Opt_rodir, Opt_err_cont,$/;"	e	enum:__anon2	file:
Opt_fmask	inode.c	/^	Opt_umask, Opt_dmask, Opt_fmask, Opt_allow_utime, Opt_codepage,$/;"	e	enum:__anon2	file:
Opt_gid	inode.c	/^	Opt_check_n, Opt_check_r, Opt_check_s, Opt_uid, Opt_gid,$/;"	e	enum:__anon2	file:
Opt_immutable	inode.c	/^	Opt_immutable, Opt_dots, Opt_nodots,$/;"	e	enum:__anon2	file:
Opt_nfs	inode.c	/^	Opt_err_panic, Opt_err_ro, Opt_discard, Opt_nfs, Opt_time_offset,$/;"	e	enum:__anon2	file:
Opt_nfs_nostale_ro	inode.c	/^	Opt_nfs_stale_rw, Opt_nfs_nostale_ro, Opt_err,$/;"	e	enum:__anon2	file:
Opt_nfs_stale_rw	inode.c	/^	Opt_nfs_stale_rw, Opt_nfs_nostale_ro, Opt_err,$/;"	e	enum:__anon2	file:
Opt_nocase	inode.c	/^	Opt_usefree, Opt_nocase, Opt_quiet, Opt_showexec, Opt_debug,$/;"	e	enum:__anon2	file:
Opt_nodots	inode.c	/^	Opt_immutable, Opt_dots, Opt_nodots,$/;"	e	enum:__anon2	file:
Opt_nonumtail_no	inode.c	/^	Opt_uni_xl_no, Opt_uni_xl_yes, Opt_nonumtail_no, Opt_nonumtail_yes,$/;"	e	enum:__anon2	file:
Opt_nonumtail_yes	inode.c	/^	Opt_uni_xl_no, Opt_uni_xl_yes, Opt_nonumtail_no, Opt_nonumtail_yes,$/;"	e	enum:__anon2	file:
Opt_obsolete	inode.c	/^	Opt_obsolete, Opt_flush, Opt_tz_utc, Opt_rodir, Opt_err_cont,$/;"	e	enum:__anon2	file:
Opt_quiet	inode.c	/^	Opt_usefree, Opt_nocase, Opt_quiet, Opt_showexec, Opt_debug,$/;"	e	enum:__anon2	file:
Opt_rodir	inode.c	/^	Opt_obsolete, Opt_flush, Opt_tz_utc, Opt_rodir, Opt_err_cont,$/;"	e	enum:__anon2	file:
Opt_shortname_lower	inode.c	/^	Opt_charset, Opt_shortname_lower, Opt_shortname_win95,$/;"	e	enum:__anon2	file:
Opt_shortname_mixed	inode.c	/^	Opt_shortname_winnt, Opt_shortname_mixed, Opt_utf8_no, Opt_utf8_yes,$/;"	e	enum:__anon2	file:
Opt_shortname_win95	inode.c	/^	Opt_charset, Opt_shortname_lower, Opt_shortname_win95,$/;"	e	enum:__anon2	file:
Opt_shortname_winnt	inode.c	/^	Opt_shortname_winnt, Opt_shortname_mixed, Opt_utf8_no, Opt_utf8_yes,$/;"	e	enum:__anon2	file:
Opt_showexec	inode.c	/^	Opt_usefree, Opt_nocase, Opt_quiet, Opt_showexec, Opt_debug,$/;"	e	enum:__anon2	file:
Opt_time_offset	inode.c	/^	Opt_err_panic, Opt_err_ro, Opt_discard, Opt_nfs, Opt_time_offset,$/;"	e	enum:__anon2	file:
Opt_tz_utc	inode.c	/^	Opt_obsolete, Opt_flush, Opt_tz_utc, Opt_rodir, Opt_err_cont,$/;"	e	enum:__anon2	file:
Opt_uid	inode.c	/^	Opt_check_n, Opt_check_r, Opt_check_s, Opt_uid, Opt_gid,$/;"	e	enum:__anon2	file:
Opt_umask	inode.c	/^	Opt_umask, Opt_dmask, Opt_fmask, Opt_allow_utime, Opt_codepage,$/;"	e	enum:__anon2	file:
Opt_uni_xl_no	inode.c	/^	Opt_uni_xl_no, Opt_uni_xl_yes, Opt_nonumtail_no, Opt_nonumtail_yes,$/;"	e	enum:__anon2	file:
Opt_uni_xl_yes	inode.c	/^	Opt_uni_xl_no, Opt_uni_xl_yes, Opt_nonumtail_no, Opt_nonumtail_yes,$/;"	e	enum:__anon2	file:
Opt_usefree	inode.c	/^	Opt_usefree, Opt_nocase, Opt_quiet, Opt_showexec, Opt_debug,$/;"	e	enum:__anon2	file:
Opt_utf8_no	inode.c	/^	Opt_shortname_winnt, Opt_shortname_mixed, Opt_utf8_no, Opt_utf8_yes,$/;"	e	enum:__anon2	file:
Opt_utf8_yes	inode.c	/^	Opt_shortname_winnt, Opt_shortname_mixed, Opt_utf8_no, Opt_utf8_yes,$/;"	e	enum:__anon2	file:
PA	fat.h	/^struct PA{$/;"	s
PARKING_DIRECTORY	fat.h	55;"	d
PARKING_EVENT_AREA_RATIO	fat.h	103;"	d
PARSE_EOF	dir.c	/^enum { PARSE_INVALID = 1, PARSE_NOT_LONGNAME, PARSE_EOF, };$/;"	e	enum:__anon1	file:
PARSE_INVALID	dir.c	/^enum { PARSE_INVALID = 1, PARSE_NOT_LONGNAME, PARSE_EOF, };$/;"	e	enum:__anon1	file:
PARSE_NOT_LONGNAME	dir.c	/^enum { PARSE_INVALID = 1, PARSE_NOT_LONGNAME, PARSE_EOF, };$/;"	e	enum:__anon1	file:
PA_management	namei_vfat.c	/^static void PA_management( struct super_block *sb )$/;"	f	file:
PA_unit_t	fat.h	/^struct PA_unit_t{$/;"	s
PRE_ALLOC_ON	inode.c	54;"	d	file:
SD1_S_ID	fat.h	18;"	d
SD2_S_ID	fat.h	19;"	d
SD_PAGE_SIZE	fat.h	65;"	d
SECS_PER_DAY	misc.c	182;"	d	file:
SECS_PER_HOUR	misc.c	181;"	d	file:
SECS_PER_MIN	misc.c	180;"	d	file:
TIMES_SET_FLAGS	file.c	458;"	d	file:
TOTAL_AREA_CNT	fat.h	21;"	d
USED	fat.h	14;"	d
VFAT_IOCTL_READDIR_BOTH32	dir.c	828;"	d	file:
VFAT_IOCTL_READDIR_SHORT32	dir.c	829;"	d	file:
VFAT_SFN_CREATE_WIN95	fat.h	120;"	d
VFAT_SFN_CREATE_WINNT	fat.h	121;"	d
VFAT_SFN_DISPLAY_LOWER	fat.h	117;"	d
VFAT_SFN_DISPLAY_WIN95	fat.h	118;"	d
VFAT_SFN_DISPLAY_WINNT	fat.h	119;"	d
YEAR_2100	misc.c	186;"	d	file:
_FAT_	namei_vfat.c	18;"	d	file:
_FAT_H	fat.h	2;"	d
__VARIABLE_EXT__	namei_vfat.c	19;"	d	file:
__decide_each_pa_status	fatent.c	/^static int __decide_each_pa_status( unsigned int start, unsigned int mid, unsigned int end, unsigned int pa_cnt, struct PA_unit_t *punit, struct super_block *sb )$/;"	f	file:
__fat_cache_inval_inode	cache.c	/^static void __fat_cache_inval_inode(struct inode *inode)$/;"	f	file:
__fat_fs_error	misc.c	/^EXPORT_SYMBOL_GPL(__fat_fs_error);$/;"	v
__fat_fs_error	misc.c	/^void __fat_fs_error(struct super_block *sb, int report, const char *fmt, ...)$/;"	f
__fat_get_block	inode.c	/^static inline int __fat_get_block(struct inode *inode, sector_t iblock,$/;"	f	file:
__fat_nfs_get_inode	nfs.c	/^static struct inode *__fat_nfs_get_inode(struct super_block *sb,$/;"	f	file:
__fat_readdir	dir.c	/^static int __fat_readdir(struct inode *inode, struct file *filp, void *dirent,$/;"	f	file:
__fat_remove_entries	dir.c	/^static int __fat_remove_entries(struct inode *dir, loff_t pos, int nr_slots)$/;"	f	file:
__fat_write_inode	inode.c	/^static int __fat_write_inode(struct inode *inode, int wait)$/;"	f	file:
__vfat_striptail_len	namei_vfat.c	/^static unsigned int __vfat_striptail_len(unsigned int len, const char *name)$/;"	f	file:
_fat_bmap	inode.c	/^static sector_t _fat_bmap(struct address_space *mapping, sector_t block)$/;"	f	file:
_fat_chain_add	config.c	/^static int _fat_chain_add(struct inode *inode, int new_dclus, int nr_cluster)$/;"	f	file:
align_check	inode.c	/^static inline unsigned int align_check( struct msdos_sb_info *sbi, unsigned int next, int area )$/;"	f	file:
align_check	namei_vfat.c	/^static inline unsigned int align_check( struct msdos_sb_info *sbi, unsigned int next, int area )$/;"	f	file:
allow_utime	fat.h	/^	unsigned short allow_utime;\/* permission for setting the [am]time *\/$/;"	m	struct:fat_mount_options
area_PA	namei_vfat.c	/^struct PA area_PA[ TOTAL_AREA_CNT ];$/;"	v	typeref:struct:PA
attr_group	namei_vfat.c	/^static struct attribute_group attr_group = {$/;"	v	typeref:struct:attribute_group	file:
attributes	namei_vfat.c	/^static struct attribute *attributes[ ] = {$/;"	v	typeref:struct:attribute	file:
bad_chars	namei_msdos.c	/^static unsigned char bad_chars[] = "*?<>|\\"";$/;"	v	file:
bad_if_strict	namei_msdos.c	/^static unsigned char bad_if_strict[] = "+=,; ";$/;"	v	file:
bh	fat.h	/^	struct buffer_head *bh;$/;"	m	struct:fat_slot_info	typeref:struct:fat_slot_info::buffer_head
bhs	fat.h	/^	struct buffer_head *bhs[2];$/;"	m	struct:fat_entry	typeref:struct:fat_entry::buffer_head
build_config_file	config.c	/^int build_config_file( struct inode *dir, struct dentry *dentry, int mode )$/;"	f
bx_area_limit	fat.h	/^	unsigned int bx_area_limit[8];$/;"	m	struct:msdos_sb_info
bx_area_ratio	fat.h	/^	unsigned int bx_area_ratio[8]; \/\/영역 크기 비율$/;"	m	struct:msdos_sb_info
bx_end_cluster	fat.h	/^	unsigned int bx_end_cluster[8]; \/* number of end cluster for each area *\/$/;"	m	struct:msdos_sb_info
bx_free_clusters	fat.h	/^	unsigned int bx_free_clusters[8] ; \/* number of free cluster for each area *\/$/;"	m	struct:msdos_sb_info
bx_free_valid	fat.h	/^	int bx_free_valid; \/\/valid check for bx$/;"	m	struct:msdos_sb_info
bx_next_start	fat.h	/^	unsigned int bx_next_start[8];$/;"	m	struct:msdos_sb_info
bx_pre_size	fat.h	/^	unsigned int bx_pre_size[8];   \/\/미리할당 크기$/;"	m	struct:msdos_sb_info
bx_prev_free	fat.h	/^	unsigned int bx_prev_free[8];  \/* Previously allocated cluster number for each area *\/$/;"	m	struct:msdos_sb_info
bx_start_cluster	fat.h	/^	unsigned int bx_start_cluster[8]; \/* number of start cluster for each area *\/$/;"	m	struct:msdos_sb_info
cache_contiguous	cache.c	/^static inline int cache_contiguous(struct fat_cache_id *cid, int dclus)$/;"	f	file:
cache_init	cache.c	/^static inline void cache_init(struct fat_cache_id *cid, int fclus, int dclus)$/;"	f	file:
cache_list	cache.c	/^	struct list_head cache_list;$/;"	m	struct:fat_cache	typeref:struct:fat_cache::list_head	file:
cache_lru	fat.h	/^	struct list_head cache_lru;$/;"	m	struct:msdos_inode_info	typeref:struct:msdos_inode_info::list_head
cache_lru_lock	fat.h	/^	spinlock_t cache_lru_lock;$/;"	m	struct:msdos_inode_info
cache_valid_id	fat.h	/^	unsigned int cache_valid_id;$/;"	m	struct:msdos_inode_info
calc_fat_clusters	inode.c	/^static unsigned long calc_fat_clusters(struct super_block *sb)$/;"	f	file:
ceil	fat.h	74;"	d
check_area_limit	inode.c	/^static int check_area_limit( struct super_block *sb, unsigned int start, unsigned int need_to_alloc, int area )$/;"	f	file:
check_chain_number_limit	inode.c	/^static int check_chain_number_limit( struct super_block *sb, int two_frag, unsigned int num_pre_alloc, unsigned int **data, int area )$/;"	f	file:
check_page_align	inode.c	/^void check_page_align( unsigned int *cluster, unsigned int max_cluster, unsigned short fat_start )$/;"	f
cluster_bits	fat.h	/^	unsigned short cluster_bits;  \/* log2(cluster_size) *\/$/;"	m	struct:msdos_sb_info
cluster_size	fat.h	/^	unsigned int cluster_size;    \/* cluster size *\/$/;"	m	struct:msdos_sb_info
clusterchain_reupdate	inode.c	/^void clusterchain_reupdate(struct super_block *sb, struct inode *inode){$/;"	f
codepage	fat.h	/^	unsigned short codepage;   \/* Codepage for shortname conversions *\/$/;"	m	struct:fat_mount_options
config_data	config.c	/^const char *config_data = "Blackbox Configuration\\r\\n\\r\\nPartitioning Size[Percentage]\\r\\n\\tBX_NORMAL       =20\\r\\n\\tBX_NORMAL_EVENT    =15\\r\\n\\tBX_PARKING_EVENT   =15\\r\\n\\tBX_MANUAL       =15\\r\\n\\tBX_IMAGE        =15\\r\\n\\tBX_ETC          =20\\r\\n\\r\\nPreallocation Setting[MB]\\r\\n\\tBX_NORMAL      =8\\r\\n\\tBX_NORMAL_EVENT    =8\\r\\n\\tBX_PARKING_EVENT   =8\\r\\n\\tBX_MANUAL      =8\\r\\n\\t\\0";$/;"	v
control_attr1	namei_vfat.c	/^static struct kobj_attribute control_attr1 = __ATTR( SD1_control, 0644, control_show_s1, control_store );$/;"	v	typeref:struct:kobj_attribute	file:
control_attr2	namei_vfat.c	/^static struct kobj_attribute control_attr2 = __ATTR( SD2_control, 0644, control_show_s2, control_store );$/;"	v	typeref:struct:kobj_attribute	file:
control_attr3	namei_vfat.c	/^static struct kobj_attribute control_attr3 = __ATTR( SD1_size_monitoring, 0644, size_show_s1, control_store );$/;"	v	typeref:struct:kobj_attribute	file:
control_attr4	namei_vfat.c	/^static struct kobj_attribute control_attr4 = __ATTR( SD2_size_monitoring, 0644, size_show_s2, control_store );$/;"	v	typeref:struct:kobj_attribute	file:
control_show_s1	namei_vfat.c	/^static ssize_t control_show_s1( struct kobject *kobj, struct kobj_attribute *attr, char *buff )$/;"	f	file:
control_show_s2	namei_vfat.c	/^static ssize_t control_show_s2( struct kobject *kobj, struct kobj_attribute *attr, char *buff )$/;"	f	file:
control_store	namei_vfat.c	/^static ssize_t control_store( struct kobject *kobj, struct kobj_attribute *attr, const char *buff, size_t count )$/;"	f	file:
count	fat.h	/^	unsigned int count;$/;"	m	struct:msdos_sb_info
cur_pa_cnt	fat.h	/^	int cur_pa_cnt; \/\/몇번 째 PA가 할당 될 것인가$/;"	m	struct:PA
data_start	fat.h	/^	unsigned long data_start;     \/* first data sector *\/$/;"	m	struct:msdos_sb_info
days_in_year	misc.c	/^static time_t days_in_year[] = {$/;"	v	file:
dcluster	cache.c	/^	int dcluster;	\/* cluster number on disk. *\/$/;"	m	struct:fat_cache	file:
dcluster	cache.c	/^	int dcluster;$/;"	m	struct:fat_cache_id	file:
de	fat.h	/^	struct msdos_dir_entry *de;$/;"	m	struct:fat_slot_info	typeref:struct:fat_slot_info::msdos_dir_entry
de_reupdate	inode.c	/^void de_reupdate(struct super_block *sb, struct inode *inode){$/;"	f
decide_each_pa_status	fatent.c	/^EXPORT_SYMBOL_GPL( decide_each_pa_status );$/;"	v
decide_each_pa_status	fatent.c	/^int decide_each_pa_status( struct super_block *sb, struct PA_unit_t *punit, int area  )$/;"	f
dir_entries	fat.h	/^	unsigned short dir_entries;   \/* root dir start & entries *\/$/;"	m	struct:msdos_sb_info
dir_hash_init	inode.c	/^static void dir_hash_init(struct super_block *sb)$/;"	f	file:
dir_hash_lock	fat.h	/^	spinlock_t dir_hash_lock;$/;"	m	struct:msdos_sb_info
dir_hashtable	fat.h	/^	struct hlist_head dir_hashtable[FAT_HASH_SIZE];$/;"	m	struct:msdos_sb_info	typeref:struct:msdos_sb_info::hlist_head
dir_ops	fat.h	/^	const void *dir_ops;	      \/* Opaque; default directory operations *\/$/;"	m	struct:msdos_sb_info
dir_per_block	fat.h	/^	int dir_per_block;	      \/* dir entries per block *\/$/;"	m	struct:msdos_sb_info
dir_per_block_bits	fat.h	/^	int dir_per_block_bits;	      \/* log2(dir_per_block) *\/$/;"	m	struct:msdos_sb_info
dir_start	fat.h	/^	unsigned long dir_start;$/;"	m	struct:msdos_sb_info
dirent	dir.c	/^	void __user *dirent;$/;"	m	struct:fat_ioctl_filldir_callback	file:
dirty	fat.h	/^	unsigned int dirty;           \/* fs state before mount *\/$/;"	m	struct:msdos_sb_info
discard	fat.h	/^		 discard:1;	   \/* Issue discard requests on deletions *\/$/;"	m	struct:fat_mount_options
do_fs_sysfs_registration	namei_vfat.c	/^static int do_fs_sysfs_registration( void )$/;"	f	file:
do_fs_sysfs_unregistration	namei_vfat.c	/^static void do_fs_sysfs_unregistration( void )$/;"	f	file:
do_msdos_rename	namei_msdos.c	/^static int do_msdos_rename(struct inode *old_dir, unsigned char *old_name,$/;"	f	file:
dotsOK	fat.h	/^		 dotsOK:1,         \/* set = hidden and system files are named '.filename' *\/$/;"	m	struct:fat_mount_options
end	fat.h	/^				 end;$/;"	m	struct:PA_unit_t
ent12_p	fat.h	/^		u8 *ent12_p[2];$/;"	m	union:fat_entry::__anon3
ent16_p	fat.h	/^		__le16 *ent16_p;$/;"	m	union:fat_entry::__anon3
ent32_p	fat.h	/^		__le32 *ent32_p;$/;"	m	union:fat_entry::__anon3
ent_blocknr	fatent.c	/^	void (*ent_blocknr)(struct super_block *, int, int *, sector_t *);$/;"	m	struct:fatent_operations	file:
ent_bread	fatent.c	/^	int (*ent_bread)(struct super_block *, struct fat_entry *,$/;"	m	struct:fatent_operations	file:
ent_get	fatent.c	/^	int (*ent_get)(struct fat_entry *);$/;"	m	struct:fatent_operations	file:
ent_next	fatent.c	/^	int (*ent_next)(struct fat_entry *);$/;"	m	struct:fatent_operations	file:
ent_put	fatent.c	/^	void (*ent_put)(struct fat_entry *, int);$/;"	m	struct:fatent_operations	file:
ent_set_ptr	fatent.c	/^	void (*ent_set_ptr)(struct fat_entry *, int);$/;"	m	struct:fatent_operations	file:
entry	fat.h	/^	int entry;$/;"	m	struct:fat_entry
errors	fat.h	/^	unsigned char errors;	   \/* On error: continue, panic, remount-ro *\/$/;"	m	struct:fat_mount_options
exit_fat_fs	inode.c	/^static void __exit exit_fat_fs(void)$/;"	f	file:
exit_msdos_fs	namei_msdos.c	/^static void __exit exit_msdos_fs(void)$/;"	f	file:
exit_vfat_fs	namei_vfat.c	/^static void __exit exit_vfat_fs(void)$/;"	f	file:
fat12_ent_blocknr	fatent.c	/^static void fat12_ent_blocknr(struct super_block *sb, int entry,$/;"	f	file:
fat12_ent_bread	fatent.c	/^static int fat12_ent_bread(struct super_block *sb, struct fat_entry *fatent,$/;"	f	file:
fat12_ent_get	fatent.c	/^static int fat12_ent_get(struct fat_entry *fatent)$/;"	f	file:
fat12_ent_next	fatent.c	/^static int fat12_ent_next(struct fat_entry *fatent)$/;"	f	file:
fat12_ent_put	fatent.c	/^static void fat12_ent_put(struct fat_entry *fatent, int new)$/;"	f	file:
fat12_ent_set_ptr	fatent.c	/^static void fat12_ent_set_ptr(struct fat_entry *fatent, int offset)$/;"	f	file:
fat12_ops	fatent.c	/^static struct fatent_operations fat12_ops = {$/;"	v	typeref:struct:fatent_operations	file:
fat16_ent_get	fatent.c	/^static int fat16_ent_get(struct fat_entry *fatent)$/;"	f	file:
fat16_ent_next	fatent.c	/^static int fat16_ent_next(struct fat_entry *fatent)$/;"	f	file:
fat16_ent_put	fatent.c	/^static void fat16_ent_put(struct fat_entry *fatent, int new)$/;"	f	file:
fat16_ent_set_ptr	fatent.c	/^static void fat16_ent_set_ptr(struct fat_entry *fatent, int offset)$/;"	f	file:
fat16_ops	fatent.c	/^static struct fatent_operations fat16_ops = {$/;"	v	typeref:struct:fatent_operations	file:
fat16_towchar	fat.h	/^static inline void fat16_towchar(wchar_t *dst, const __u8 *src, size_t len)$/;"	f
fat32_ent_get	fatent.c	/^static int fat32_ent_get(struct fat_entry *fatent)$/;"	f	file:
fat32_ent_next	fatent.c	/^static int fat32_ent_next(struct fat_entry *fatent)$/;"	f	file:
fat32_ent_put	fatent.c	/^static void fat32_ent_put(struct fat_entry *fatent, int new)$/;"	f	file:
fat32_ent_set_ptr	fatent.c	/^static void fat32_ent_set_ptr(struct fat_entry *fatent, int offset)$/;"	f	file:
fat32_ops	fatent.c	/^static struct fatent_operations fat32_ops = {$/;"	v	typeref:struct:fatent_operations	file:
fat__get_entry	dir.c	/^static int fat__get_entry(struct inode *dir, loff_t *pos,$/;"	f	file:
fat_add_cluster	inode.c	/^static int fat_add_cluster(struct inode *inode)$/;"	f	file:
fat_add_entries	dir.c	/^EXPORT_SYMBOL_GPL(fat_add_entries);$/;"	v
fat_add_entries	dir.c	/^int fat_add_entries(struct inode *dir, void *slots, int nr_slots,$/;"	f
fat_add_new_entries	dir.c	/^static int fat_add_new_entries(struct inode *dir, void *slots, int nr_slots,$/;"	f	file:
fat_alloc_cluster	fatent.c	/^int fat_alloc_cluster( struct inode *inode, int *cluster, int mode )$/;"	f
fat_alloc_clusters	fatent.c	/^int fat_alloc_clusters(struct inode *inode, int *cluster, int nr_cluster)$/;"	f
fat_alloc_inode	inode.c	/^static struct inode *fat_alloc_inode(struct super_block *sb)$/;"	f	file:
fat_alloc_new_dir	dir.c	/^EXPORT_SYMBOL_GPL(fat_alloc_new_dir);$/;"	v
fat_alloc_new_dir	dir.c	/^int fat_alloc_new_dir(struct inode *dir, struct timespec *ts)$/;"	f
fat_allow_set_time	file.c	/^static int fat_allow_set_time(struct msdos_sb_info *sbi, struct inode *inode)$/;"	f	file:
fat_aops	inode.c	/^static const struct address_space_operations fat_aops = {$/;"	v	typeref:struct:address_space_operations	file:
fat_attach	inode.c	/^EXPORT_SYMBOL_GPL(fat_attach);$/;"	v
fat_attach	inode.c	/^void fat_attach(struct inode *inode, loff_t i_pos)$/;"	f
fat_bits	fat.h	/^	unsigned char fats, fat_bits; \/* number of FATs, FAT bits (12 or 16) *\/$/;"	m	struct:msdos_sb_info
fat_block	inode.c	/^static int fat_block = -1;$/;"	v	file:
fat_bmap	cache.c	/^int fat_bmap(struct inode *inode, sector_t sector, sector_t *phys,$/;"	f
fat_bmap_cluster	cache.c	/^static int fat_bmap_cluster(struct inode *inode, int cluster)$/;"	f	file:
fat_build_inode	inode.c	/^EXPORT_SYMBOL_GPL(fat_build_inode);$/;"	v
fat_build_inode	inode.c	/^struct inode *fat_build_inode(struct super_block *sb,$/;"	f
fat_cache	cache.c	/^struct fat_cache {$/;"	s	file:
fat_cache_add	cache.c	/^static void fat_cache_add(struct inode *inode, struct fat_cache_id *new)$/;"	f	file:
fat_cache_alloc	cache.c	/^static inline struct fat_cache *fat_cache_alloc(struct inode *inode)$/;"	f	file:
fat_cache_cachep	cache.c	/^static struct kmem_cache *fat_cache_cachep;$/;"	v	typeref:struct:kmem_cache	file:
fat_cache_destroy	cache.c	/^void fat_cache_destroy(void)$/;"	f
fat_cache_free	cache.c	/^static inline void fat_cache_free(struct fat_cache *cache)$/;"	f	file:
fat_cache_id	cache.c	/^struct fat_cache_id {$/;"	s	file:
fat_cache_init	cache.c	/^int __init fat_cache_init(void)$/;"	f
fat_cache_inval_inode	cache.c	/^void fat_cache_inval_inode(struct inode *inode)$/;"	f
fat_cache_lookup	cache.c	/^static int fat_cache_lookup(struct inode *inode, int fclus,$/;"	f	file:
fat_cache_merge	cache.c	/^static struct fat_cache *fat_cache_merge(struct inode *inode,$/;"	f	file:
fat_cache_update_lru	cache.c	/^static inline void fat_cache_update_lru(struct inode *inode,$/;"	f	file:
fat_calc_dir_size	inode.c	/^static int fat_calc_dir_size(struct inode *inode)$/;"	f	file:
fat_chain_add	misc.c	/^int fat_chain_add(struct inode *inode, int new_dclus, int nr_cluster)$/;"	f
fat_checksum	fat.h	/^static inline unsigned char fat_checksum(const __u8 *name)$/;"	f
fat_clus_to_blknr	fat.h	/^static inline sector_t fat_clus_to_blknr(struct msdos_sb_info *sbi, int clus)$/;"	f
fat_clusters_flush	misc.c	/^int fat_clusters_flush(struct super_block *sb)$/;"	f
fat_collect_bhs	fatent.c	/^static void fat_collect_bhs(struct buffer_head **bhs, int *nr_bhs,$/;"	f	file:
fat_compat_dir_ioctl	dir.c	/^static long fat_compat_dir_ioctl(struct file *filp, unsigned cmd,$/;"	f	file:
fat_config_init	config.c	/^EXPORT_SYMBOL_GPL( fat_config_init );$/;"	v
fat_config_init	config.c	/^int fat_config_init(struct super_block *sb)$/;"	f
fat_cont_expand	file.c	/^static int fat_cont_expand(struct inode *inode, loff_t size)$/;"	f	file:
fat_count_free_clusters	fatent.c	/^int fat_count_free_clusters(struct super_block *sb)$/;"	f
fat_count_free_clusters_for_area	fatent.c	/^EXPORT_SYMBOL_GPL( fat_count_free_clusters_for_area );$/;"	v
fat_count_free_clusters_for_area	fatent.c	/^int fat_count_free_clusters_for_area(struct super_block *sb)$/;"	f
fat_default_codepage	inode.c	/^static int fat_default_codepage = CONFIG_FAT_DEFAULT_CODEPAGE;$/;"	v	file:
fat_default_iocharset	inode.c	/^static char fat_default_iocharset[] = CONFIG_FAT_DEFAULT_IOCHARSET;$/;"	v	file:
fat_destroy_inode	inode.c	/^static void fat_destroy_inode(struct inode *inode)$/;"	f	file:
fat_destroy_inodecache	inode.c	/^static void __exit fat_destroy_inodecache(void)$/;"	f	file:
fat_detach	inode.c	/^EXPORT_SYMBOL_GPL(fat_detach);$/;"	v
fat_detach	inode.c	/^void fat_detach(struct inode *inode)$/;"	f
fat_dget	nfs.c	/^static struct inode *fat_dget(struct super_block *sb, int i_logstart)$/;"	f	file:
fat_dir_empty	dir.c	/^EXPORT_SYMBOL_GPL(fat_dir_empty);$/;"	v
fat_dir_empty	dir.c	/^int fat_dir_empty(struct inode *dir)$/;"	f
fat_dir_hash	fat.h	/^static inline unsigned long fat_dir_hash(int logstart)$/;"	f
fat_dir_ioctl	dir.c	/^static long fat_dir_ioctl(struct file *filp, unsigned int cmd,$/;"	f	file:
fat_dir_operations	dir.c	/^const struct file_operations fat_dir_operations = {$/;"	v	typeref:struct:file_operations
fat_dir_readahead	dir.c	/^static inline void fat_dir_readahead(struct inode *dir, sector_t iblock,$/;"	f	file:
fat_direct_IO	inode.c	/^static ssize_t fat_direct_IO(int rw, struct kiocb *iocb,$/;"	f	file:
fat_encode_fh_nostale	nfs.c	/^fat_encode_fh_nostale(struct inode *inode, __u32 *fh, int *lenp,$/;"	f	file:
fat_ent_access_init	fatent.c	/^void fat_ent_access_init(struct super_block *sb)$/;"	f
fat_ent_blocknr	fatent.c	/^static void fat_ent_blocknr(struct super_block *sb, int entry,$/;"	f	file:
fat_ent_bread	fatent.c	/^static int fat_ent_bread(struct super_block *sb, struct fat_entry *fatent,$/;"	f	file:
fat_ent_next	fatent.c	/^static inline int fat_ent_next(struct msdos_sb_info *sbi,$/;"	f	file:
fat_ent_read	fatent.c	/^int fat_ent_read(struct inode *inode, struct fat_entry *fatent, int entry)$/;"	f
fat_ent_read_block	fatent.c	/^static inline int fat_ent_read_block(struct super_block *sb,$/;"	f	file:
fat_ent_reada	fatent.c	/^static void fat_ent_reada(struct super_block *sb, struct fat_entry *fatent,$/;"	f	file:
fat_ent_update_ptr	fatent.c	/^static inline int fat_ent_update_ptr(struct super_block *sb,$/;"	f	file:
fat_ent_write	fatent.c	/^int fat_ent_write(struct inode *inode, struct fat_entry *fatent,$/;"	f
fat_entry	fat.h	/^struct fat_entry {$/;"	s
fat_evict_inode	inode.c	/^static void fat_evict_inode(struct inode *inode)$/;"	f	file:
fat_export_ops	nfs.c	/^const struct export_operations fat_export_ops = {$/;"	v	typeref:struct:export_operations
fat_export_ops_nostale	nfs.c	/^const struct export_operations fat_export_ops_nostale = {$/;"	v	typeref:struct:export_operations
fat_fh_to_dentry	nfs.c	/^static struct dentry *fat_fh_to_dentry(struct super_block *sb, struct fid *fid,$/;"	f	file:
fat_fh_to_dentry_nostale	nfs.c	/^static struct dentry *fat_fh_to_dentry_nostale(struct super_block *sb,$/;"	f	file:
fat_fh_to_parent	nfs.c	/^static struct dentry *fat_fh_to_parent(struct super_block *sb, struct fid *fid,$/;"	f	file:
fat_fh_to_parent_nostale	nfs.c	/^static struct dentry *fat_fh_to_parent_nostale(struct super_block *sb,$/;"	f	file:
fat_fid	nfs.c	/^struct fat_fid {$/;"	s	file:
fat_file_fsync	file.c	/^int fat_file_fsync(struct file *filp, loff_t start, loff_t end, int datasync)$/;"	f
fat_file_inode_operations	file.c	/^const struct inode_operations fat_file_inode_operations = {$/;"	v	typeref:struct:inode_operations
fat_file_operations	file.c	/^const struct file_operations fat_file_operations = {$/;"	v	typeref:struct:file_operations
fat_file_release	file.c	/^static int fat_file_release(struct inode *inode, struct file *filp)$/;"	f	file:
fat_fill_inode	inode.c	/^int fat_fill_inode(struct inode *inode, struct msdos_dir_entry *de)$/;"	f
fat_fill_super	inode.c	/^EXPORT_SYMBOL_GPL(fat_fill_super);$/;"	v
fat_fill_super	inode.c	/^int fat_fill_super(struct super_block *sb, void *data, int silent, int isvfat,$/;"	f
fat_flush_inodes	inode.c	/^EXPORT_SYMBOL_GPL(fat_flush_inodes);$/;"	v
fat_flush_inodes	inode.c	/^int fat_flush_inodes(struct super_block *sb, struct inode *i1, struct inode *i2)$/;"	f
fat_free	file.c	/^static int fat_free(struct inode *inode, int skip)$/;"	f	file:
fat_free_clusters	fatent.c	/^EXPORT_SYMBOL_GPL(fat_free_clusters);$/;"	v
fat_free_clusters	fatent.c	/^int fat_free_clusters(struct inode *inode, int cluster)$/;"	f
fat_fs_error	fat.h	584;"	d
fat_fs_error_ratelimit	fat.h	586;"	d
fat_generic_compat_ioctl	file.c	/^static long fat_generic_compat_ioctl(struct file *filp, unsigned int cmd,$/;"	f	file:
fat_generic_ioctl	file.c	/^long fat_generic_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)$/;"	f
fat_get_blknr_offset	fat.h	/^static inline void fat_get_blknr_offset(struct msdos_sb_info *sbi,$/;"	f
fat_get_block	inode.c	/^static int fat_get_block(struct inode *inode, sector_t iblock,$/;"	f	file:
fat_get_cluster	cache.c	/^int fat_get_cluster(struct inode *inode, int cluster, int *fclus, int *dclus)$/;"	f
fat_get_dotdot_entry	dir.c	/^EXPORT_SYMBOL_GPL(fat_get_dotdot_entry);$/;"	v
fat_get_dotdot_entry	dir.c	/^int fat_get_dotdot_entry(struct inode *dir, struct buffer_head **bh,$/;"	f
fat_get_entry	dir.c	/^static inline int fat_get_entry(struct inode *dir, loff_t *pos,$/;"	f	file:
fat_get_parent	nfs.c	/^static struct dentry *fat_get_parent(struct dentry *child_dir)$/;"	f	file:
fat_get_short_entry	dir.c	/^static int fat_get_short_entry(struct inode *dir, loff_t *pos,$/;"	f	file:
fat_get_start	fat.h	/^static inline int fat_get_start(const struct msdos_sb_info *sbi,$/;"	f
fat_getattr	file.c	/^EXPORT_SYMBOL_GPL(fat_getattr);$/;"	v
fat_getattr	file.c	/^int fat_getattr(struct vfsmount *mnt, struct dentry *dentry, struct kstat *stat)$/;"	f
fat_handle_cluster	inode.c	/^int fat_handle_cluster( struct inode *inode, int mode )$/;"	f
fat_hash	inode.c	/^static inline unsigned long fat_hash(loff_t i_pos)$/;"	f	file:
fat_hash_init	inode.c	/^static void fat_hash_init(struct super_block *sb)$/;"	f	file:
fat_i_callback	inode.c	/^static void fat_i_callback(struct rcu_head *head)$/;"	f	file:
fat_i_pos_read	fat.h	/^static inline loff_t fat_i_pos_read(struct msdos_sb_info *sbi,$/;"	f
fat_iget	inode.c	/^struct inode *fat_iget(struct super_block *sb, loff_t i_pos)$/;"	f
fat_ilookup	nfs.c	/^static struct inode *fat_ilookup(struct super_block *sb, u64 ino, loff_t i_pos)$/;"	f	file:
fat_init_inodecache	inode.c	/^static int __init fat_init_inodecache(void)$/;"	f	file:
fat_inode	fat.h	/^	struct inode *fat_inode;$/;"	m	struct:fat_entry	typeref:struct:fat_entry::inode
fat_inode	fat.h	/^	struct inode *fat_inode;$/;"	m	struct:msdos_sb_info	typeref:struct:msdos_sb_info::inode
fat_inode_cachep	inode.c	/^static struct kmem_cache *fat_inode_cachep;$/;"	v	typeref:struct:kmem_cache	file:
fat_ioctl_filldir_callback	dir.c	/^struct fat_ioctl_filldir_callback {$/;"	s	file:
fat_ioctl_get_attributes	file.c	/^static int fat_ioctl_get_attributes(struct inode *inode, u32 __user *user_attr)$/;"	f	file:
fat_ioctl_readdir	dir.c	/^static int fat_ioctl_readdir(struct inode *inode, struct file *filp,$/;"	f	file:
fat_ioctl_set_attributes	file.c	/^static int fat_ioctl_set_attributes(struct file *file, u32 __user *user_attr)$/;"	f	file:
fat_just_init_super	inode.c	/^EXPORT_SYMBOL_GPL( fat_just_init_super );$/;"	v
fat_just_init_super	inode.c	/^int fat_just_init_super(struct super_block *sb)$/;"	f
fat_length	fat.h	/^	unsigned long fat_length;     \/* FAT start & length (sec.) *\/$/;"	m	struct:msdos_sb_info
fat_lock	fat.h	/^	struct mutex fat_lock;$/;"	m	struct:msdos_sb_info	typeref:struct:msdos_sb_info::mutex
fat_lock_build_inode	inode.c	/^static inline void fat_lock_build_inode(struct msdos_sb_info *sbi)$/;"	f	file:
fat_make_attrs	fat.h	/^static inline u8 fat_make_attrs(struct inode *inode)$/;"	f
fat_make_i_pos	dir.c	/^static inline loff_t fat_make_i_pos(struct super_block *sb,$/;"	f	file:
fat_make_mode	fat.h	/^static inline umode_t fat_make_mode(struct msdos_sb_info *sbi,$/;"	f
fat_max_cache	cache.c	/^static inline int fat_max_cache(struct inode *inode)$/;"	f	file:
fat_mirror_bhs	fatent.c	/^static int fat_mirror_bhs(struct super_block *sb, struct buffer_head **bhs,$/;"	f	file:
fat_mode_can_hold_ro	fat.h	/^static inline int fat_mode_can_hold_ro(struct inode *inode)$/;"	f
fat_mount_options	fat.h	/^struct fat_mount_options {$/;"	s
fat_msg	misc.c	/^void fat_msg(struct super_block *sb, const char *level, const char *fmt, ...)$/;"	f
fat_msg_ratelimit	fat.h	590;"	d
fat_name_match	dir.c	/^static inline int fat_name_match(struct msdos_sb_info *sbi,$/;"	f	file:
fat_nfs_get_inode	nfs.c	/^static struct inode *fat_nfs_get_inode(struct super_block *sb,$/;"	f	file:
fat_original_flag	fat.h	/^	int fat_original_flag;$/;"	m	struct:msdos_sb_info
fat_parse_long	dir.c	/^static int fat_parse_long(struct inode *dir, loff_t *pos,$/;"	f	file:
fat_parse_short	dir.c	/^static int fat_parse_short(struct super_block *sb,$/;"	f	file:
fat_put_super	inode.c	/^static void fat_put_super(struct super_block *sb)$/;"	f	file:
fat_read_root	inode.c	/^static int fat_read_root(struct inode *inode)$/;"	f	file:
fat_readdir	dir.c	/^static int fat_readdir(struct file *filp, void *dirent, filldir_t filldir)$/;"	f	file:
fat_readpage	inode.c	/^static int fat_readpage(struct file *file, struct page *page)$/;"	f	file:
fat_readpages	inode.c	/^static int fat_readpages(struct file *file, struct address_space *mapping,$/;"	f	file:
fat_rebuild_parent	nfs.c	/^struct inode *fat_rebuild_parent(struct super_block *sb, int parent_logstart)$/;"	f	file:
fat_remount	inode.c	/^static int fat_remount(struct super_block *sb, int *flags, char *data)$/;"	f	file:
fat_remove_entries	dir.c	/^EXPORT_SYMBOL_GPL(fat_remove_entries);$/;"	v
fat_remove_entries	dir.c	/^int fat_remove_entries(struct inode *dir, struct fat_slot_info *sinfo)$/;"	f
fat_sanitize_mode	file.c	/^static int fat_sanitize_mode(const struct msdos_sb_info *sbi,$/;"	f	file:
fat_save_attrs	fat.h	/^static inline void fat_save_attrs(struct inode *inode, u8 attrs)$/;"	f
fat_scan	dir.c	/^EXPORT_SYMBOL_GPL(fat_scan);$/;"	v
fat_scan	dir.c	/^int fat_scan(struct inode *dir, const unsigned char *name,$/;"	f
fat_scan_logstart	dir.c	/^int fat_scan_logstart(struct inode *dir, int i_logstart,$/;"	f
fat_scan_opel	dir.c	/^EXPORT_SYMBOL_GPL(fat_scan_opel);$/;"	v
fat_scan_opel	dir.c	/^int fat_scan_opel(struct inode *dir, const unsigned char *name,$/;"	f
fat_search_long	dir.c	/^EXPORT_SYMBOL_GPL(fat_search_long);$/;"	v
fat_search_long	dir.c	/^int fat_search_long(struct inode *inode, const unsigned char *name,$/;"	f
fat_set_start	fat.h	/^static inline void fat_set_start(struct msdos_dir_entry *de, int cluster)$/;"	f
fat_set_state	inode.c	/^static void fat_set_state(struct super_block *sb,$/;"	f	file:
fat_setattr	file.c	/^EXPORT_SYMBOL_GPL(fat_setattr);$/;"	v
fat_setattr	file.c	/^int fat_setattr(struct dentry *dentry, struct iattr *attr)$/;"	f
fat_short2lower_uni	dir.c	/^fat_short2lower_uni(struct nls_table *t, unsigned char *c,$/;"	f	file:
fat_short2uni	dir.c	/^fat_short2uni(struct nls_table *t, unsigned char *c, int clen, wchar_t *uni)$/;"	f	file:
fat_shortname2uni	dir.c	/^fat_shortname2uni(struct nls_table *nls, unsigned char *buf, int buf_size,$/;"	f	file:
fat_show_options	inode.c	/^static int fat_show_options(struct seq_file *m, struct dentry *root)$/;"	f	file:
fat_slot_info	fat.h	/^struct fat_slot_info {$/;"	s
fat_sops	inode.c	/^static const struct super_operations fat_sops = {$/;"	v	typeref:struct:super_operations	file:
fat_start	fat.h	/^	unsigned short fat_start;$/;"	m	struct:msdos_sb_info
fat_statfs	inode.c	/^static int fat_statfs(struct dentry *dentry, struct kstatfs *buf)$/;"	f	file:
fat_subdirs	dir.c	/^int fat_subdirs(struct inode *dir)$/;"	f
fat_sync_bhs	misc.c	/^int fat_sync_bhs(struct buffer_head **bhs, int nr_bhs)$/;"	f
fat_sync_inode	inode.c	/^EXPORT_SYMBOL_GPL(fat_sync_inode);$/;"	v
fat_sync_inode	inode.c	/^int fat_sync_inode(struct inode *inode)$/;"	f
fat_table_update	inode.c	/^void fat_table_update( struct super_block *sb, int start, int two_frag, int page_num, unsigned int temp_start, unsigned int **data )$/;"	f
fat_time_fat2unix	misc.c	/^void fat_time_fat2unix(struct msdos_sb_info *sbi, struct timespec *ts,$/;"	f
fat_time_unix2fat	misc.c	/^EXPORT_SYMBOL_GPL(fat_time_unix2fat);$/;"	v
fat_time_unix2fat	misc.c	/^void fat_time_unix2fat(struct msdos_sb_info *sbi, struct timespec *ts,$/;"	f
fat_tokens	inode.c	/^static const match_table_t fat_tokens = {$/;"	v	file:
fat_tolower	dir.c	/^static inline unsigned char fat_tolower(unsigned char c)$/;"	f	file:
fat_truncate_blocks	file.c	/^void fat_truncate_blocks(struct inode *inode, loff_t offset)$/;"	f
fat_uni_to_x8	dir.c	/^static inline int fat_uni_to_x8(struct super_block *sb, const wchar_t *uni,$/;"	f	file:
fat_unlock_build_inode	inode.c	/^static inline void fat_unlock_build_inode(struct msdos_sb_info *sbi)$/;"	f	file:
fat_update_super	inode.c	/^EXPORT_SYMBOL_GPL( fat_update_super );$/;"	v
fat_update_super	inode.c	/^int fat_update_super(struct super_block *sb){$/;"	f
fat_write_begin	inode.c	/^static int fat_write_begin(struct file *file, struct address_space *mapping,$/;"	f	file:
fat_write_end	inode.c	/^static int fat_write_end(struct file *file, struct address_space *mapping,$/;"	f	file:
fat_write_failed	inode.c	/^static void fat_write_failed(struct address_space *mapping, loff_t to)$/;"	f	file:
fat_write_inode	inode.c	/^static int fat_write_inode(struct inode *inode, struct writeback_control *wbc)$/;"	f	file:
fat_writepage	inode.c	/^static int fat_writepage(struct page *page, struct writeback_control *wbc)$/;"	f	file:
fat_writepages	inode.c	/^static int fat_writepages(struct address_space *mapping,$/;"	f	file:
fat_zeroed_cluster	dir.c	/^static int fat_zeroed_cluster(struct inode *dir, sector_t blknr, int nr_used,$/;"	f	file:
fatent_brelse	fat.h	/^static inline void fatent_brelse(struct fat_entry *fatent)$/;"	f
fatent_init	fat.h	/^static inline void fatent_init(struct fat_entry *fatent)$/;"	f
fatent_operations	fatent.c	/^struct fatent_operations {$/;"	s	file:
fatent_ops	fat.h	/^	struct fatent_operations *fatent_ops;$/;"	m	struct:msdos_sb_info	typeref:struct:msdos_sb_info::fatent_operations
fatent_set_entry	fat.h	/^static inline void fatent_set_entry(struct fat_entry *fatent, int entry)$/;"	f
fatent_shift	fat.h	/^	int fatent_shift;$/;"	m	struct:msdos_sb_info
fats	fat.h	/^	unsigned char fats, fat_bits; \/* number of FATs, FAT bits (12 or 16) *\/$/;"	m	struct:msdos_sb_info
fatwchar_to16	fat.h	/^static inline void fatwchar_to16(__u8 *dst, const wchar_t *src, size_t len)$/;"	f
fcluster	cache.c	/^	int fcluster;	\/* cluster number in the file. *\/$/;"	m	struct:fat_cache	file:
fcluster	cache.c	/^	int fcluster;$/;"	m	struct:fat_cache_id	file:
file_name	fat.h	/^	const char* file_name;$/;"	m	struct:msdos_sb_info
fill_page_and_repos_start	inode.c	/^static unsigned int fill_page_and_repos_start( struct super_block *sb, int two_frag, unsigned int *chain, unsigned int **data, unsigned int need_to_alloc, int area )$/;"	f	file:
find_valid_new_next	inode.c	/^static unsigned int find_valid_new_next(struct inode *inode, int area, unsigned int* next, unsigned int* prev)$/;"	f	file:
flag	fat.h	/^	unsigned char flag;$/;"	m	struct:PA_unit_t
floor	fat.h	75;"	d
flush	fat.h	/^		 flush:1,	   \/* write things quickly *\/$/;"	m	struct:fat_mount_options
free_clus_valid	fat.h	/^	unsigned int free_clus_valid; \/* is free_clusters valid? *\/$/;"	m	struct:msdos_sb_info
free_clusters	fat.h	/^	unsigned int free_clusters;  \/* -1 if undefined *\/$/;"	m	struct:msdos_sb_info
fs_dmask	fat.h	/^	unsigned short fs_dmask;$/;"	m	struct:fat_mount_options
fs_fmask	fat.h	/^	unsigned short fs_fmask;$/;"	m	struct:fat_mount_options
fs_gid	fat.h	/^	kgid_t fs_gid;$/;"	m	struct:fat_mount_options
fs_uid	fat.h	/^	kuid_t fs_uid;$/;"	m	struct:fat_mount_options
fsinfo_inode	fat.h	/^	struct inode *fsinfo_inode;$/;"	m	struct:msdos_sb_info	typeref:struct:msdos_sb_info::inode
fsinfo_sector	fat.h	/^	unsigned long fsinfo_sector;  \/* sector number of FAT32 fsinfo *\/$/;"	m	struct:msdos_sb_info
g_sb_s1	namei_vfat.c	/^struct super_block *g_sb_s1;$/;"	v	typeref:struct:super_block
g_sb_s2	namei_vfat.c	/^struct super_block *g_sb_s2;$/;"	v	typeref:struct:super_block
g_total_cluster_s1	namei_vfat.c	/^unsigned int g_total_cluster_s1[10];$/;"	v
g_total_cluster_s2	namei_vfat.c	/^unsigned int g_total_cluster_s2[10];$/;"	v
get_area_number	fatent.c	/^void get_area_number( int *area, struct inode *inode )$/;"	f
get_area_number_for_free_func	fatent.c	/^static int get_area_number_for_free_func( struct super_block *sb, int entry )$/;"	f	file:
i_attrs	fat.h	/^	int i_attrs;		\/* unused attribute bits *\/$/;"	m	struct:msdos_inode_info
i_dir_hash	fat.h	/^	struct hlist_node i_dir_hash;	\/* hash by i_logstart *\/$/;"	m	struct:msdos_inode_info	typeref:struct:msdos_inode_info::hlist_node
i_fat_hash	fat.h	/^	struct hlist_node i_fat_hash;	\/* hash by i_location *\/$/;"	m	struct:msdos_inode_info	typeref:struct:msdos_inode_info::hlist_node
i_gen	nfs.c	/^	u32 i_gen;$/;"	m	struct:fat_fid	file:
i_ino	fat.h	/^	unsigned int i_ino;$/;"	m	struct:msdos_sb_info
i_logstart	fat.h	/^	int i_logstart;		\/* logical first cluster *\/$/;"	m	struct:msdos_inode_info
i_pos	fat.h	/^	loff_t i_pos;		\/* on-disk position of directory entry *\/$/;"	m	struct:fat_slot_info
i_pos	fat.h	/^	loff_t i_pos;		\/* on-disk position of directory entry or 0 *\/$/;"	m	struct:msdos_inode_info
i_pos_hi	nfs.c	/^	u16 i_pos_hi;$/;"	m	struct:fat_fid	file:
i_pos_low	nfs.c	/^	u32 i_pos_low;$/;"	m	struct:fat_fid	file:
i_start	fat.h	/^	int i_start;		\/* first cluster or 0 *\/$/;"	m	struct:msdos_inode_info
id	cache.c	/^	unsigned int id;$/;"	m	struct:fat_cache_id	file:
init_fat_fs	inode.c	/^static int __init init_fat_fs(void)$/;"	f	file:
init_msdos_fs	namei_msdos.c	/^static int __init init_msdos_fs(void)$/;"	f	file:
init_once	cache.c	/^static void init_once(void *foo)$/;"	f	file:
init_once	inode.c	/^static void init_once(void *foo)$/;"	f	file:
init_vfat_fs	namei_vfat.c	/^static int __init init_vfat_fs(void)$/;"	f	file:
inode_hash_lock	fat.h	/^	spinlock_t inode_hash_lock;$/;"	m	struct:msdos_sb_info
inode_hashtable	fat.h	/^	struct hlist_head inode_hashtable[FAT_HASH_SIZE];$/;"	m	struct:msdos_sb_info	typeref:struct:msdos_sb_info::hlist_head
iocharset	fat.h	/^	char *iocharset;           \/* Charset used for filename input\/display *\/$/;"	m	struct:fat_mount_options
is_exec	inode.c	/^static int is_exec(unsigned char *extension)$/;"	f	file:
isvfat	fat.h	/^		 isvfat:1,         \/* 0=no vfat long filename support, 1=vfat support *\/$/;"	m	struct:fat_mount_options
llu	fat.h	/^typedef unsigned long long	llu;$/;"	t
lock_fat	fatent.c	/^static inline void lock_fat(struct msdos_sb_info *sbi)$/;"	f	file:
long_len	dir.c	/^	int long_len;$/;"	m	struct:fat_ioctl_filldir_callback	file:
longname	dir.c	/^	const char *longname;$/;"	m	struct:fat_ioctl_filldir_callback	file:
lower	namei_vfat.c	/^	unsigned char lower:1,$/;"	m	struct:shortname_info	file:
manager_control_sd1	namei_vfat.c	/^char manager_control_sd1[20]; $/;"	v
manager_control_sd2	namei_vfat.c	/^char manager_control_sd2[20]; $/;"	v
mark_fsinfo_dirty	fatent.c	/^static void mark_fsinfo_dirty(struct super_block *sb)$/;"	f	file:
max_cluster	fat.h	/^	unsigned long max_cluster;    \/* maximum cluster number *\/$/;"	m	struct:msdos_sb_info
mmu_private	fat.h	/^	loff_t mmu_private;	\/* physically allocated size *\/$/;"	m	struct:msdos_inode_info
msdos_add_entry	namei_msdos.c	/^static int msdos_add_entry(struct inode *dir, const unsigned char *name,$/;"	f	file:
msdos_cmp	namei_msdos.c	/^static int msdos_cmp(const struct dentry *parent, const struct inode *pinode,$/;"	f	file:
msdos_create	namei_msdos.c	/^static int msdos_create(struct inode *dir, struct dentry *dentry, umode_t mode,$/;"	f	file:
msdos_dentry_operations	namei_msdos.c	/^static const struct dentry_operations msdos_dentry_operations = {$/;"	v	typeref:struct:dentry_operations	file:
msdos_dir_inode_operations	namei_msdos.c	/^static const struct inode_operations msdos_dir_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
msdos_fill_super	namei_msdos.c	/^static int msdos_fill_super(struct super_block *sb, void *data, int silent)$/;"	f	file:
msdos_find	namei_msdos.c	/^static int msdos_find(struct inode *dir, const unsigned char *name, int len,$/;"	f	file:
msdos_format_name	namei_msdos.c	/^static int msdos_format_name(const unsigned char *name, int len,$/;"	f	file:
msdos_fs_type	namei_msdos.c	/^static struct file_system_type msdos_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
msdos_hash	namei_msdos.c	/^static int msdos_hash(const struct dentry *dentry, const struct inode *inode,$/;"	f	file:
msdos_inode_info	fat.h	/^struct msdos_inode_info {$/;"	s
msdos_lookup	namei_msdos.c	/^static struct dentry *msdos_lookup(struct inode *dir, struct dentry *dentry,$/;"	f	file:
msdos_mkdir	namei_msdos.c	/^static int msdos_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)$/;"	f	file:
msdos_mount	namei_msdos.c	/^static struct dentry *msdos_mount(struct file_system_type *fs_type,$/;"	f	file:
msdos_name	config.c	/^unsigned char msdos_name[ MSDOS_NAME ] = "BXFS_CON";$/;"	v
msdos_rename	namei_msdos.c	/^static int msdos_rename(struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
msdos_rmdir	namei_msdos.c	/^static int msdos_rmdir(struct inode *dir, struct dentry *dentry)$/;"	f	file:
msdos_sb_info	fat.h	/^struct msdos_sb_info {$/;"	s
msdos_tokens	inode.c	/^static const match_table_t msdos_tokens = {$/;"	v	file:
msdos_unlink	namei_msdos.c	/^static int msdos_unlink(struct inode *dir, struct dentry *dentry)$/;"	f	file:
name_check	fat.h	/^	unsigned char name_check;  \/* r = relaxed, n = normal, s = strict *\/$/;"	m	struct:fat_mount_options
nfs	fat.h	/^	unsigned char nfs;	  \/* NFS support: nostale_ro, stale_rw *\/$/;"	m	struct:fat_mount_options
nfs_build_inode_lock	fat.h	/^	struct mutex nfs_build_inode_lock;$/;"	m	struct:msdos_sb_info	typeref:struct:msdos_sb_info::mutex
nls_disk	fat.h	/^	struct nls_table *nls_disk;   \/* Codepage used on disk *\/$/;"	m	struct:msdos_sb_info	typeref:struct:msdos_sb_info::nls_table
nls_io	fat.h	/^	struct nls_table *nls_io;     \/* Charset used for input and display *\/$/;"	m	struct:msdos_sb_info	typeref:struct:msdos_sb_info::nls_table
nocase	fat.h	/^		 nocase:1,	   \/* Does this need case conversion? 0=need case conversion*\/$/;"	m	struct:fat_mount_options
nr_bhs	fat.h	/^	int nr_bhs;$/;"	m	struct:fat_entry
nr_caches	fat.h	/^	int nr_caches;$/;"	m	struct:msdos_inode_info
nr_contig	cache.c	/^	int nr_contig;	\/* number of contiguous clusters *\/$/;"	m	struct:fat_cache	file:
nr_contig	cache.c	/^	int nr_contig;$/;"	m	struct:fat_cache_id	file:
nr_slots	fat.h	/^	int nr_slots;		\/* number of slots + 1(de) in filename *\/$/;"	m	struct:fat_slot_info
numtail	fat.h	/^		 numtail:1,        \/* Does first alias have a numeric '~1' type tail? *\/$/;"	m	struct:fat_mount_options
opel_fat_kobj	namei_vfat.c	/^static struct kobject *opel_fat_kobj;$/;"	v	typeref:struct:kobject	file:
opel_fat_mirror_bhs	inode.c	/^static int opel_fat_mirror_bhs(struct super_block *sb, struct buffer_head **bhs,$/;"	f	file:
opel_kill_block_super	namei_vfat.c	/^static void opel_kill_block_super( struct super_block *sb )$/;"	f	file:
opel_vfat_find_form	config.c	/^static int opel_vfat_find_form( struct msdos_sb_info *sbi, struct inode *dir, unsigned char *name, sector_t *blknr )$/;"	f	file:
options	fat.h	/^	struct fat_mount_options options;$/;"	m	struct:msdos_sb_info	typeref:struct:msdos_sb_info::fat_mount_options
pa_cluster_num	fat.h	/^	int pa_cluster_num; \/\/한 PA가 갖는 클러스터 개수$/;"	m	struct:PA
pa_num	fat.h	/^	int pa_num; \/\/PA개수$/;"	m	struct:PA
pa_unit	fat.h	/^	struct PA_unit *pa_unit;$/;"	m	struct:PA	typeref:struct:PA::PA_unit
parea_PA	fat.h	/^	struct PA *parea_PA[8];$/;"	m	struct:msdos_sb_info	typeref:struct:msdos_sb_info::PA
parent_i_gen	nfs.c	/^	u32 parent_i_gen;$/;"	m	struct:fat_fid	file:
parent_i_pos_hi	nfs.c	/^	u16 parent_i_pos_hi;$/;"	m	struct:fat_fid	file:
parent_i_pos_low	nfs.c	/^	u32 parent_i_pos_low;$/;"	m	struct:fat_fid	file:
parse_options	inode.c	/^static int parse_options(struct super_block *sb, char *options, int is_vfat,$/;"	f	file:
preAlloc	inode.c	/^static int preAlloc( struct inode *inode, unsigned int start, unsigned int end, int pa_cluster_num, int area )$/;"	f	file:
pre_alloced	fat.h	/^	unsigned char pre_alloced; \/\/pre_alloc_check$/;"	m	struct:msdos_inode_info
pre_count	fat.h	/^	unsigned int pre_count;$/;"	m	struct:msdos_inode_info
prev_free	fat.h	/^	unsigned int prev_free;      \/* previously allocated cluster number *\/$/;"	m	struct:msdos_sb_info
quiet	fat.h	/^	unsigned quiet:1,          \/* set = fake successful chmods and chowns *\/$/;"	m	struct:fat_mount_options
ratelimit	fat.h	/^	struct ratelimit_state ratelimit;$/;"	m	struct:msdos_sb_info	typeref:struct:msdos_sb_info::ratelimit_state
read_config_data	config.c	/^static int read_config_data(struct super_block *sb, char *data)$/;"	f	file:
result	dir.c	/^	int result;$/;"	m	struct:fat_ioctl_filldir_callback	file:
rodir	fat.h	/^		 rodir:1,	   \/* allow ATTR_RO for directory *\/$/;"	m	struct:fat_mount_options
root_cluster	fat.h	/^	unsigned long root_cluster;   \/* first cluster of the root directory *\/$/;"	m	struct:msdos_sb_info
s_lock	fat.h	/^	struct mutex s_lock;$/;"	m	struct:msdos_sb_info	typeref:struct:msdos_sb_info::mutex
sbi_update_with_prealloc	inode.c	/^static void sbi_update_with_prealloc( struct inode *inode, unsigned int new_next, unsigned int new_prev, unsigned int num_pre_alloc, unsigned int next, int area  )$/;"	f	file:
sec_per_clus	fat.h	/^	unsigned short sec_per_clus;  \/* sectors\/cluster *\/$/;"	m	struct:msdos_sb_info
setting_start_end_in_memory	namei_vfat.c	/^static void setting_start_end_in_memory( struct super_block *sb )$/;"	f	file:
setup	namei_msdos.c	/^static void setup(struct super_block *sb)$/;"	f	file:
setup	namei_vfat.c	/^static void setup(struct super_block *sb)$/;"	f	file:
short_len	dir.c	/^	int short_len;$/;"	m	struct:fat_ioctl_filldir_callback	file:
shortname	dir.c	/^	const char *shortname;$/;"	m	struct:fat_ioctl_filldir_callback	file:
shortname	fat.h	/^	unsigned short shortname;  \/* flags for shortname display\/create rule *\/$/;"	m	struct:fat_mount_options
shortname_info	namei_vfat.c	/^struct shortname_info {$/;"	s	file:
show_the_status_unit_flag	fatent.c	/^EXPORT_SYMBOL_GPL( show_the_status_unit_flag );$/;"	v
show_the_status_unit_flag	fatent.c	/^void show_the_status_unit_flag( struct super_block *sb, int area )$/;"	f
showexec	fat.h	/^		 showexec:1,       \/* set = only set x bit for com\/exe\/bat *\/$/;"	m	struct:fat_mount_options
size_show_s1	namei_vfat.c	/^static ssize_t size_show_s1( struct kobject *kobj, struct kobj_attribute *attr, char *buff )$/;"	f	file:
size_show_s2	namei_vfat.c	/^static ssize_t size_show_s2( struct kobject *kobj, struct kobj_attribute *attr, char *buff )$/;"	f	file:
slot_off	fat.h	/^	loff_t slot_off;	\/* offset for slot or de start *\/$/;"	m	struct:fat_slot_info
start	fat.h	/^	unsigned int start,$/;"	m	struct:PA_unit_t
sys_immutable	fat.h	/^		 sys_immutable:1,  \/* set = system files are immutable *\/$/;"	m	struct:fat_mount_options
temp_sb	fatent.c	/^struct super_block *temp_sb;$/;"	v	typeref:struct:super_block
time	fat.h	/^	unsigned int time;$/;"	m	struct:msdos_sb_info
time_offset	fat.h	/^	int time_offset;	   \/* Offset of timestamps from UTC (in minutes) *\/$/;"	m	struct:fat_mount_options
time_ordering	inode.c	/^EXPORT_SYMBOL_GPL( time_ordering ); $/;"	v
time_ordering	inode.c	/^unsigned long time_ordering( void )$/;"	f
to_shortname_char	namei_vfat.c	/^static inline int to_shortname_char(struct nls_table *nls,$/;"	f	file:
truncate_lock	fat.h	/^	struct rw_semaphore truncate_lock; \/* protect bmap against truncate *\/$/;"	m	struct:msdos_inode_info	typeref:struct:msdos_inode_info::rw_semaphore
tz_set	fat.h	/^		 tz_set:1,	   \/* Filesystem timestamps' offset set *\/$/;"	m	struct:fat_mount_options
u	fat.h	/^	} u;$/;"	m	struct:fat_entry	typeref:union:fat_entry::__anon3
uni16_to_x8	dir.c	/^static int uni16_to_x8(struct super_block *sb, unsigned char *ascii,$/;"	f	file:
unicode_xlate	fat.h	/^		 unicode_xlate:1,  \/* create escape sequences for unhandled Unicode *\/$/;"	m	struct:fat_mount_options
unlock_fat	fatent.c	/^static inline void unlock_fat(struct msdos_sb_info *sbi)$/;"	f	file:
upper	namei_vfat.c	/^		      upper:1,$/;"	m	struct:shortname_info	file:
usefree	fat.h	/^		 usefree:1,	   \/* Use free_clusters for FAT32 *\/$/;"	m	struct:fat_mount_options
utf8	fat.h	/^		 utf8:1,	   \/* Use of UTF-8 character set (Default) *\/$/;"	m	struct:fat_mount_options
valid	namei_vfat.c	/^		      valid:1;$/;"	m	struct:shortname_info	file:
vfat_add_entry	namei_vfat.c	/^static int vfat_add_entry(struct inode *dir, struct qstr *qname, int is_dir,$/;"	f	file:
vfat_bad_char	namei_vfat.c	/^static inline wchar_t vfat_bad_char(wchar_t w)$/;"	f	file:
vfat_build_slots	namei_vfat.c	/^static int vfat_build_slots(struct inode *dir, const unsigned char *name,$/;"	f	file:
vfat_ci_dentry_ops	namei_vfat.c	/^static const struct dentry_operations vfat_ci_dentry_ops = {$/;"	v	typeref:struct:dentry_operations	file:
vfat_cmp	namei_vfat.c	/^static int vfat_cmp(const struct dentry *parent, const struct inode *pinode,$/;"	f	file:
vfat_cmpi	namei_vfat.c	/^static int vfat_cmpi(const struct dentry *parent, const struct inode *pinode,$/;"	f	file:
vfat_create	namei_vfat.c	/^static int vfat_create(struct inode *dir, struct dentry *dentry, umode_t mode,$/;"	f	file:
vfat_create_shortname	namei_vfat.c	/^static int vfat_create_shortname(struct inode *dir, struct nls_table *nls,$/;"	f	file:
vfat_d_anon_disconn	namei_vfat.c	/^static int vfat_d_anon_disconn(struct dentry *dentry)$/;"	f	file:
vfat_dentry_ops	namei_vfat.c	/^static const struct dentry_operations vfat_dentry_ops = {$/;"	v	typeref:struct:dentry_operations	file:
vfat_dir_inode_operations	namei_vfat.c	/^static const struct inode_operations vfat_dir_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
vfat_fill_super	namei_vfat.c	/^static int vfat_fill_super(struct super_block *sb, void *data, int silent)$/;"	f	file:
vfat_find	namei_vfat.c	/^static int vfat_find(struct inode *dir, struct qstr *qname,$/;"	f	file:
vfat_find_form	namei_vfat.c	/^static int vfat_find_form(struct inode *dir, unsigned char *name)$/;"	f	file:
vfat_fs_type	namei_vfat.c	/^static struct file_system_type vfat_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
vfat_hash	namei_vfat.c	/^static int vfat_hash(const struct dentry *dentry, const struct inode *inode,$/;"	f	file:
vfat_hashi	namei_vfat.c	/^static int vfat_hashi(const struct dentry *dentry, const struct inode *inode,$/;"	f	file:
vfat_is_used_badchars	namei_vfat.c	/^static inline int vfat_is_used_badchars(const wchar_t *s, int len)$/;"	f	file:
vfat_lookup	namei_vfat.c	/^static struct dentry *vfat_lookup(struct inode *dir, struct dentry *dentry,$/;"	f	file:
vfat_mkdir	namei_vfat.c	/^static int vfat_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)$/;"	f	file:
vfat_mount	namei_vfat.c	/^static struct dentry *vfat_mount(struct file_system_type *fs_type,$/;"	f	file:
vfat_rename	namei_vfat.c	/^static int vfat_rename(struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
vfat_replace_char	namei_vfat.c	/^static inline wchar_t vfat_replace_char(wchar_t w)$/;"	f	file:
vfat_revalidate	namei_vfat.c	/^static int vfat_revalidate(struct dentry *dentry, unsigned int flags)$/;"	f	file:
vfat_revalidate_ci	namei_vfat.c	/^static int vfat_revalidate_ci(struct dentry *dentry, unsigned int flags)$/;"	f	file:
vfat_revalidate_shortname	namei_vfat.c	/^static int vfat_revalidate_shortname(struct dentry *dentry)$/;"	f	file:
vfat_rmdir	namei_vfat.c	/^static int vfat_rmdir(struct inode *dir, struct dentry *dentry)$/;"	f	file:
vfat_skip_char	namei_vfat.c	/^static wchar_t vfat_skip_char(wchar_t w)$/;"	f	file:
vfat_striptail_len	namei_vfat.c	/^static unsigned int vfat_striptail_len(const struct qstr *qstr)$/;"	f	file:
vfat_tokens	inode.c	/^static const match_table_t vfat_tokens = {$/;"	v	file:
vfat_unlink	namei_vfat.c	/^static int vfat_unlink(struct inode *dir, struct dentry *dentry)$/;"	f	file:
vfs_inode	fat.h	/^	struct inode vfs_inode;$/;"	m	struct:msdos_inode_info	typeref:struct:msdos_inode_info::inode
writeback_inode	inode.c	/^static int writeback_inode(struct inode *inode)$/;"	f	file:
xlate_to_uni	namei_vfat.c	/^xlate_to_uni(const unsigned char *name, int len, unsigned char *outname,$/;"	f	file:
